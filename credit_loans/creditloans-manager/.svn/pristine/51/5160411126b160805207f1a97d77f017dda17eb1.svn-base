package cn.creditloans.manager.controllers;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.creditloans.core.dto.outer.OuterDepartmentDTO;
import cn.creditloans.core.dto.outer.OuterRoleDTO;
import cn.creditloans.core.dto.outer.OuterUserDTO;
import cn.creditloans.core.service.OuterDepartmentService;
import cn.creditloans.core.service.OuterRoleService;
import cn.creditloans.core.service.OuterUserService;
import cn.creditloans.core.tools.constants.Constants;
import cn.creditloans.core.tools.page.PageModel;
import cn.creditloans.core.tools.util.ElectricPropertyPlaceholderConfigurer;

@Controller
@RequestMapping(value = "/enterprise/user")
public class OuterUserController {
	private static final Log logger = LogFactory.getLog(OuterUserController.class);
	
	@Autowired
	OuterUserService outerUserService;

	@Autowired
	OuterDepartmentService outerDepartmentService;
	
	@Autowired
	OuterRoleService outerRoleService;
	

	/**
	 * 打开用户管理的页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/showList", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String enterpriseUserList(Model model, @RequestParam(value = "currentPage", required = false) String _currentPage, OuterUserDTO outerUserDto) {
		int currentPage = 1;
		if (_currentPage != null && _currentPage != "") {
			currentPage = Integer.parseInt(_currentPage.toString());
		}  
		int pageSize = Integer.parseInt(ElectricPropertyPlaceholderConfigurer.getContextProperty(Constants.PLATFORM_PAGE_SHOW_COUNT));
		
		
		
		PageModel<OuterUserDTO> outerUserPage = outerUserService.getEnterpriseUserPageList(outerUserDto,
				currentPage, pageSize);
		model.addAttribute("enterpriseUserPage", outerUserPage);
		model.addAttribute("queryDto", outerUserDto);
		return "/enterprise/user/enterprise_user_list";
	}
	
	/**
	 * 打开用户管理添加的页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/add", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String showAddOuterUser(Model model){
		//只展示所有一级企业（fid=0）
		List<OuterRoleDTO> outerRoleDtoList = outerRoleService.getOuterRoleDtoListByOuterDepartmentId(0);
		model.addAttribute("enterpriseRoleDtoList", outerRoleDtoList);
		return "/enterprise/user/enterprise_user_add";
	}
	
	@RequestMapping(value = "/getDepList", method = { RequestMethod.GET,
			RequestMethod.POST })
	public @ResponseBody
	List<OuterDepartmentDTO> getDepartmentList(
			@RequestParam(value = "enterpriseId", required = false) String enterpriseId) {
		int _enterpriseId =Integer.parseInt(enterpriseId);
		List<OuterDepartmentDTO> enterpriseDepartmentDtoList = outerDepartmentService.getDepartmentDtoListByEnterpriseId(_enterpriseId);
		return enterpriseDepartmentDtoList;
	}
	
	@RequestMapping(value = "/getRoleList", method = { RequestMethod.GET,
			RequestMethod.POST })
	public @ResponseBody
	List<OuterRoleDTO> getRoletList(
			@RequestParam(value = "enterpriseId", required = false) String enterpriseId) {
		int _enterpriseId =Integer.parseInt(enterpriseId);
		List<OuterRoleDTO> enterpriseRoleDtoList = outerRoleService.getOuterRoleDtoListByOuterDepartmentId(_enterpriseId);
		return enterpriseRoleDtoList;
	}
	
	/**
	 * 判断邮箱是否注册
	 * @param email
	 * @return
	 */
	@RequestMapping(value="/checkEmail", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody boolean checkEmail(@RequestParam(value="email") String email) {
	    if(email == null || "".equals(email)) {
	        return true;
	    }
	    OuterUserDTO enterpriseUserDto = outerUserService.getOuterUserByEmial(email);
	    if(enterpriseUserDto == null) {
	        return true;
	    } else {
	        return false;
	    }
	    
	}
	/**
	 * 添加用户
	 * @param enterpriseUserDto
	 * @return
	 */
	@RequestMapping(value="/doAdd", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody int addEnterpriseUser(@RequestBody OuterUserDTO outerUserDTO) {
		int enterpriseUserId = outerUserService.saveOuterUser(outerUserDTO);
		return enterpriseUserId;
	}
	
	/**
	 * 打开用户管理修改的页面
	 * @param model userId
	 * @return
	 */
	@RequestMapping(value = "/edit", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String showEditEnterpriseUser(Model model,@RequestParam(value = "userId", required = false) int userId){
		OuterUserDTO enterpriseUserDto = outerUserService.getCascadeOuterUserByUserId(userId, 0);
		//只展示所有一级企业（fid=0）
		//List<EnterpriseDTO> enterpriseDtoList = enterpriseService.getEnterpriseDtoListByFid(0); 
		String resetPwd = ElectricPropertyPlaceholderConfigurer.getContextProperty(Constants.ENTERPRISEUSER_RESET_PASSWORD);
		model.addAttribute("enterpriseUserDto", enterpriseUserDto);
		//model.addAttribute("enterpriseDtoList", enterpriseDtoList);
		model.addAttribute("resetPwd", resetPwd);
		return "/enterprise/user/enterprise_user_edit";
	}
	
	/**
	 * 修改用户
	 * @param enterpriseUserDto
	 * @return
	 */
	@RequestMapping(value="/doEdit", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody void editEnterpriseUser(@RequestBody OuterUserDTO outerUserDTO) {
		outerUserService.updateOuterUser(outerUserDTO);
	}

	/**
	 * 删除用户
	 * @param userId
	 * @return
	 */
	@RequestMapping(value="/doDelete", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody void deleteEnterpriseUser(@RequestParam(value = "userId", required = false) String userId){
		outerUserService.deleteOuterUser(Integer.parseInt(userId));
	}
}
