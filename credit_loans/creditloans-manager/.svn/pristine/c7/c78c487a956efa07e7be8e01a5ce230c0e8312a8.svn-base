package cn.creditloans.manager.controllers;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import cn.creditloans.core.dto.platform.PlatformUserDTO;
import cn.creditloans.core.service.PlatformLoginService;
import cn.creditloans.core.service.PlatformUserService;
import cn.creditloans.manager.util.cookie.CookieUtil;


@Controller
@RequestMapping(value = "")
public class PlatformLoginController {
	private static final Log logger = LogFactory.getLog(PlatformLoginController.class);
	
	@Autowired
	PlatformLoginService platformLoginService;
	
	@Autowired
	PlatformUserService platformUserService;
	
	/**
	 * 掉转到login页面
	 * @return
	 */
	@RequestMapping(value="/login", method = {RequestMethod.GET, RequestMethod.POST})
	public String login() {
		return "/login";
	}
	
	@RequestMapping(value="/doLogin", method = {RequestMethod.GET, RequestMethod.POST})
	public String doLogin(@RequestParam(required=false) String emailAddress, 
			@RequestParam(required=false) String password,String validateCode, HttpServletRequest request, HttpServletResponse response,HttpSession session, Model model) {
		
		PlatformUserDTO platformUserDto = new PlatformUserDTO();
		try {
			platformUserDto.setEmail(emailAddress);
			platformUserDto.setPassword(password);
			platformUserDto = platformLoginService.login(platformUserDto);
			
			
			if(platformUserDto.getStatus()==1){
				model.addAttribute("errorMsg", "该用户已被禁用，无法登录系统");
				model.addAttribute("isHaveErr", true);
				return "/login";
			}else{
				// FIXME : platform-token 放入常量吧
				CookieUtil.addCookie("platform-token", platformUserDto.getToken(), true, request, response);
				model.addAttribute("platformuser", platformUserDto);
				
				return "redirect:/platform/user/showList";
			}
			
		} catch (RuntimeException e) {
			if (logger.isErrorEnabled()) {
				logger.error(e.getMessage(), e);
			}
			
			model.addAttribute("errorMsg", "用户名或密码错误");
			model.addAttribute("isHaveErr", true);
			return "/login";
		}
	}
	
	@RequestMapping(value="/logout", method = {RequestMethod.GET, RequestMethod.POST})
	public String logout(HttpServletRequest request, HttpServletResponse response) {
		String token = CookieUtil.getToken(request,"platform-token");
		// 删除用户的缓存内容
		platformUserService.deleteTempDatas(token);
		
		// 删除 cookie
		CookieUtil.delCookie("platform-token", request, response); //FIXME : platform-token 放入常量吧
		return "redirect:/login";
	}
	
	@RequestMapping(value="/notFount", method = {RequestMethod.GET, RequestMethod.POST})
	public String notFount(){
		return "/not_fount";
	}
}
