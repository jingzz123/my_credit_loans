package cn.creditloans.manager.controllers;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.creditloans.core.dto.inner.InnerDepartmentDTO;
import cn.creditloans.core.dto.inner.InnerRoleDTO;
import cn.creditloans.core.dto.inner.InnerUserDTO;
import cn.creditloans.core.service.InnerDepartmentService;
import cn.creditloans.core.service.InnerRoleService;
import cn.creditloans.core.service.InnerUserService;
import cn.creditloans.core.tools.constants.Constants;
import cn.creditloans.core.tools.page.PageModel;
import cn.creditloans.core.tools.util.ElectricPropertyPlaceholderConfigurer;

@Controller
@RequestMapping(value = "/platform/user")
public class InnerUserController {
	private static final Log logger = LogFactory.getLog(InnerUserController.class);
	
	@Autowired
	InnerUserService innerUserService;
	
	@Autowired
	InnerDepartmentService innerDepartmentService;
	
	@Autowired
	InnerRoleService innerRoleService;
	
	/**
	 * 打开用户管理的页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/showList", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String innerUserList(Model model, @RequestParam(value = "currentPage", required = false) String _currentPage, InnerUserDTO platformUserDto) {
		int currentPage = 1;
		if (_currentPage != null && _currentPage != "") {
			currentPage = Integer.parseInt(_currentPage.toString());
		}  
		int pageSize = Integer.parseInt(ElectricPropertyPlaceholderConfigurer.getContextProperty(Constants.PLATFORM_PAGE_SHOW_COUNT));
		
		
		
		PageModel<InnerUserDTO> innerUserPage = innerUserService.getInnerUserPageList(platformUserDto,
				currentPage, pageSize);
		model.addAttribute("platformUserPage", innerUserPage);
		model.addAttribute("queryDto", platformUserDto);
		logger.info("");
		return "/platform/user/platform_user_list";
	}
	
	/**
	 * 打开用户管理添加的页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/add", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String showAddPlatformUser(Model model){
		List<InnerDepartmentDTO> innerDepartmentDTOList = innerDepartmentService.getInnerDepartmentDTOList();
		model.addAttribute("platformDepartmentDtoList", innerDepartmentDTOList);
		List<InnerRoleDTO> innerRoleDTOList = innerRoleService.getinnerRoleDTOList();
		model.addAttribute("platformRoleDtoList", innerRoleDTOList);
		return "/platform/user/platform_user_add";
	}
	
	/**
	 * 判断邮箱是否注册
	 * @param email
	 * @return
	 */
	@RequestMapping(value="/checkEmail", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody boolean checkEmail(@RequestParam(value="email") String email) {
	    if(email == null || "".equals(email)) {
	        return true;
	    }
	    InnerUserDTO innerUserDTO = innerUserService.getInnerUserByEmial(email);
	    if(innerUserDTO == null) {
	        return true;
	    } else {
	        return false;
	    }
	    
	}
	/**
	 * 添加用户
	 * @param platformUserDto
	 * @return
	 */
	@RequestMapping(value="/doAdd", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody int addInnerUser(@RequestBody InnerUserDTO innerUserDTO) {
		int innerUserId = innerUserService.saveInnermUser(innerUserDTO);
		return innerUserId;
	}
	
	/**
	 * 打开用户管理修改的页面
	 * @param model userId
	 * @return
	 */
	@RequestMapping(value = "/edit", method = { RequestMethod.GET, RequestMethod.POST })
	public String showEditInnerUser(Model model,@RequestParam(value = "userId", required = false) String userId){
		InnerUserDTO innerUserDto = innerUserService.getCascadeInnerUserByUserId(Integer.parseInt(userId));
		List<InnerDepartmentDTO>innerDepartmentDTOList = innerDepartmentService.getInnerDepartmentDTOList();
		String resetPwd = ElectricPropertyPlaceholderConfigurer.getContextProperty(Constants.ENTERPRISEUSER_RESET_PASSWORD);
		model.addAttribute("platformUserDto", innerUserDto);
		model.addAttribute("platformDepartmentDtoList", innerDepartmentDTOList);
		model.addAttribute("resetPwd", resetPwd);
		return "/platform/user/platform_user_edit";
	}
	
	/**
	 * 修改用户
	 * @param platformUserDto
	 * @return
	 */
	@RequestMapping(value="/doEdit", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody void editInnerUser(@RequestBody InnerUserDTO innerUserDTO) {
		innerUserService.updateInnermUser(innerUserDTO);
	}

	/**
	 * 删除用户
	 * @param userId
	 * @return
	 */
	@RequestMapping(value="/doDelete", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody void deleteInnerUser(@RequestParam(value = "userId", required = false) String userId){
		innerUserService.deleteInnerUser(Integer.parseInt(userId));
	}
	
}
