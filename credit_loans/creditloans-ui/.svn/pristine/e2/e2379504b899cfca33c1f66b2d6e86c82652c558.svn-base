package cn.creditloans.ui.controllers;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

//文件上传下载
@Controller
@RequestMapping("file/upload")
public class FileUploadController {
	//日志输出类
	private static final Log loger = LogFactory.getLog(FileUploadController.class);
	/**
	 * 文件下载
	 * @param fileName   文件名
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/downloadFile", method = {RequestMethod.GET, RequestMethod.POST})
	public void downloadFile(@RequestParam("fileName") String fileName,
			HttpServletRequest request, HttpServletResponse response){
		//模板路径
		String templatePath = request.getSession().getServletContext().getRealPath("/")+"\\template\\";
		//模板文件路径
		String templateFilePath = templatePath+fileName;
		//输入缓冲流
		BufferedInputStream bufferedInputStream = null;
		//输出缓冲流
		BufferedOutputStream bufferedOutputStream = null;
		try {
			long fileLength = new File(templateFilePath).length();  
            response.setContentType("application/x-msdownload;");  
            response.setHeader("Content-disposition", "attachment; filename="  
                    + new String(fileName.getBytes("utf-8"), "ISO8859-1"));  
            response.setHeader("Content-Length", String.valueOf(fileLength));
			bufferedInputStream = new BufferedInputStream(new FileInputStream(templateFilePath));
			bufferedOutputStream = new BufferedOutputStream(response.getOutputStream());
			byte[] buffer = new byte[2048];
			int bytesRead = 0;  
            while (-1 != (bytesRead = bufferedInputStream.read(buffer, 0, buffer.length))) {  
            	bufferedOutputStream.write(buffer, 0, bytesRead);  
            }  
		} catch (FileNotFoundException e) {
			loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<文件"+fileName+"不存在");
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<文件名编码失败");
			e.printStackTrace();
		} catch (IOException e) {
			loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<文件流输出异常");
			e.printStackTrace();
		}finally {
			closeBufferedInputStream(bufferedInputStream);
			closeBufferedOutputStream(bufferedOutputStream);
		}
	}
	
	/**
	 * 文件上传
	 * @param templateName
	 * @return
	 * @throws IOException 
	 */
	@RequestMapping(value = "/fileUpload", method = {RequestMethod.POST})
	public @ResponseBody String fileUpload(@RequestParam MultipartFile templateName, HttpServletRequest request){
		 String realPath = request.getSession().getServletContext().getRealPath("/template/");
		 String filePath = null;
		 String fileName = templateName.getOriginalFilename();
		 String newFileName = null;
		 if(fileName != null && "" != fileName){
			 int index = fileName.lastIndexOf("."); 
			 newFileName = new Date().getTime() + "." + fileName.substring(index+1, fileName.length());
			 try {
					FileUtils.copyInputStreamToFile(templateName.getInputStream(), new File(realPath, newFileName));
					filePath = realPath + "/" + newFileName;
		         } catch (IOException e) {
					loger.info("<<<<<<<<<<<<<<<<<<<<<<<<文件上传失败");
					e.printStackTrace();
				} 
		 }
		 return filePath;
	}

	/**
	 * 关闭文件输入流
	 * @param bufferedInputStream
	 */
	private void closeBufferedInputStream(BufferedInputStream bufferedInputStream){
		if(bufferedInputStream != null){
			try {
				bufferedInputStream.close();
			} catch (IOException e) {
				loger.info("<<<<<<<<<<<<<<<<<<<<<<<关闭输入缓冲流失败");
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 关闭文件输出流
	 * @param bufferedOutputStream
	 */
    private void closeBufferedOutputStream(BufferedOutputStream bufferedOutputStream){
		if(bufferedOutputStream != null){
			try {
				bufferedOutputStream.close();
			} catch (IOException e) {
				loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<关闭文件输出流失败");
				e.printStackTrace();
			}
		}
	}
}
