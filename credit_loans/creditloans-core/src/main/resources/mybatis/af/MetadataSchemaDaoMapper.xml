<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="cn.creditloans.core.dao.af.MetadataSchemaDao">

	<resultMap id="resultMap" type="cn.creditloans.core.entity.af.MetadataSchema">
        <id property="id" column="id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="type" column="type" />
		<result property="delimiter" column="delimiter" />
		<result property="isNested" column="is_nested" />
		<result property="idLength" column="id_length" />
		<result property="isInner" column="is_inner" />
		<result property="departmentId" column="department_id" />
		<result property="isUsed" column="is_used" />
		<result property="createUserId" column="create_user_id" />
		<result property="createTime" column="create_time" />
		<result property="upadteUserId" column="upadte_user_id" />
		<result property="updateTime" column="update_time" />
    </resultMap>
    
    <!-- 插入单个 -->
    <insert id="insert" parameterType="cn.creditloans.core.entity.af.MetadataSchema">
    	<selectKey order="AFTER" keyProperty="id" resultType="java.lang.Integer">
		    SELECT currval('af_metadata_schema_id_seq')
		</selectKey>
 		INSERT INTO af_metadata_schema (name,description,type,delimiter,
 			is_nested,id_length,is_inner,department_id,is_used,create_user_id,
 			create_time,upadte_user_id,update_time)
		VALUES (#{name}, #{description}, #{type}, #{delimiter}, 
			#{isNested}, #{idLength}, #{isInner}, #{departmentId}, #{isUsed}, #{createUserId},
			now(), #{upadteUserId}, now());
    </insert>
    
    <!-- 修改单个 -->
    <update id="update"  parameterType="cn.creditloans.core.entity.af.MetadataSchema">
    	update af_metadata_schema set name = #{name}, description = #{description}, 
    	            type = #{type}, delimiter = #{delimiter},
    	            is_nested = #{isNested}, id_length = #{idLength}, is_inner = #{isInner},
    	            department_id = #{departmentId},is_used = #{isUsed},upadte_user_id = #{upadteUserId},
					update_time = now() where id = #{id}
    </update>
    
    <!-- 删除单个 -->
    <delete id="delete" parameterType="int">
    	delete from af_metadata_schema where id = #{id} 
    </delete>
    
    <resultMap id="relationRM" type="cn.creditloans.core.entity.af.MetadataSchema" extends="resultMap">
        <collection property="metadataRelationList" javaType="ArrayList" column="id" ofType="cn.creditloans.core.entity.af.MetadataRelation" 
                    select="selectMetadataRelationListByChildSchemaId"/>           
    </resultMap>
    <resultMap id="metadataRelationResultMap" type="cn.creditloans.core.entity.af.MetadataRelation">
        <id property="id" column="id" />
		<result property="mainSchemaId" column="main_schema_id" />
		<result property="childSchemaId" column="child_schema_id" />
		<result property="sequence" column="sequence" />
		<result property="createUserId" column="create_user_id" />
		<result property="createTime" column="create_time" />
		<result property="upadteUserId" column="upadte_user_id" />
		<result property="updateTime" column="update_time" />
    </resultMap>
    <select id="selectMetadataRelationListByChildSchemaId" parameterType="int" resultMap="metadataRelationResultMap">
    	select * from af_metadata_nest_relation where child_schema_id = #{id}
    </select>
    <!-- 查询单个子 schema -->
    <select id="selectChildById" resultMap="relationRM" parameterType="int">
    	select * from af_metadata_schema where id = #{id} 
    </select>
    <!-- 查询单个 -->
    <select id="select" resultMap="resultMap" parameterType="int">
    	select * from af_metadata_schema where id = #{id} 
    </select>
    
    <!-- 查询所有 -->
    <select id="selectAllInfos" resultMap="resultMap" parameterType="int">
    	select * from af_metadata_schema 
    </select>
    
	<!-- 查询总量，这里的需要根据实际条件进行查询 -->
	<select id="selectPageCount" resultType="int" parameterType="cn.creditloans.core.entity.af.MetadataSchema">
        select count(1) FROM af_metadata_schema where 1=1
         <if test="name != null and '' != name">  
			and name like '%${name}%'  
		</if>
		<if test="description != null and '' != description">
			and description like '%${description}%' 
		</if>
    </select>
    
    <!-- 根据实际情况需要修改语句 -->
    <select id="selectPageList" resultMap="resultMap">
         select * from af_metadata_schema where 1=1
         <if test="entity.name != null and '' != entity.name">  
			and name like '%${entity.name}%'  
		</if>
		<if test="entity.description != null and '' != entity.description">
			and description like '%${entity.description}%' 
		</if>
         order by create_time desc  limit #{pm.pageSize} offset #{pm.startCount}
    </select>

	<!-- 根据Ids查询所有schema -->
	<select id="selectSchemaListByList" resultMap="resultMap" parameterType="List">
        select * from af_metadata_schema
        <if test="metadataRelationList != null and metadataRelationList.size() >0"> 
         where id in
        <foreach item="item" index="index" collection="metadataRelationList" open="(" separator="," close=")">
			#{item.childSchemaId}
		</foreach>
        </if>
        <if test="metadataRelationList == null or metadataRelationList.size() ==0"> 
         where id = -1
        </if>
    </select>
    
    <!--  查询所有普通schema -->
    <select id="selectChildSchema" resultMap="resultMap">
        select * from af_metadata_schema where is_nested = 'N'
    </select>
    
     <select id="selectMainSchema" resultMap="resultMap">
        select * from af_metadata_schema where is_nested = 'Y'
    </select>
    
     <!-- 批量插入关系 -->
    <insert id="batchInsertMetadataRelation" parameterType="java.util.List">
        insert into af_metadata_nest_relation (main_schema_id, child_schema_id, sequence, create_user_id, create_time, upadte_user_id,update_time)  
        VALUES  
        <foreach collection="list" item="item" index="index" separator=",">  
            (#{item.mainSchemaId}, #{item.childSchemaId},  #{item.sequence}, #{item.createUserId}, now(), #{item.upadteUserId}, now())
        </foreach>  
    </insert>
    <!-- 查询最大序列 -->
    <select id="getMaxSequence" parameterType="map" resultType="Integer">
    	select max(${sequence}) from af_metadata_nest_relation where main_schema_id = #{mainSchemaId}
    </select>
    <!-- 通过子schema删除关系 -->
    <delete id="deleteMetadataRelationByChildSchemaId" parameterType="int">
    	delete from af_metadata_nest_relation where child_schema_id = #{schemaId}
    </delete>
    <!-- 通过主schema删除关系 -->
    <delete id="deleteMetadataRelationByMainSchemaId" parameterType="int">
    	delete from af_metadata_nest_relation where main_schema_id = #{schemaId}
    </delete>
    
    <!-- 检查名字是否唯一 -->
    <select id="selectNameIsExit" resultType="int" parameterType="string">
    	select count(1)  from af_metadata_schema where name = #{name}
    </select>
    
    
     <!-- 检查关联是否存在 -->
    <select id="selectCountBySchemaId" resultType="int" parameterType="string">
    	select count(1)  from af_metadata_nest_relation where main_schema_id = #{schemaId}
    </select>
</mapper>