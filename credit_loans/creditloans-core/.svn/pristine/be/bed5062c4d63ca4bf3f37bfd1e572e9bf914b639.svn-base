<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="cn.creditloans.core.dao.PlatformUserDao">

	<resultMap id="platformUserResultMap" type="cn.creditloans.core.entity.platform.PlatformUser">
        <id property="id" column="id" />
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="name" column="name"/>
        <result property="tel" column="tel"/>
        <result property="phone" column="phone"/>
        <result property="qq" column="qq"/>
        <result property="status" column="status"/>
        <result property="depId" column="dep_id"/>
        <result property="token" column="token"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>
	
	<resultMap id="cascadePlatformUserRoleResultMap" type="cn.creditloans.core.entity.platform.PlatformUser" extends="platformUserResultMap">  
        <collection property="platformUserRoleList" javaType="ArrayList" column="id" ofType="cn.creditloans.core.entity.platform.PlatformUserRole" 
                    select="selectPlatformUserRoleListByUserId"/>           
    </resultMap>
    
    <resultMap id="platformUserRoleResultMap" type="cn.creditloans.core.entity.platform.PlatformUserRole">
        <id property="id" column="id" />
        <result property="userId" column="user_id"/>
        <result property="roleId" column="role_id"/>
    </resultMap>
    
	<select id="selectCascadePlatformUserByUserId" parameterType="int" resultMap="cascadePlatformUserRoleResultMap" >
        select id, password, email, name, tel, phone, qq, status, dep_id, token, create_time, update_time from platform_user where id = #{userId}
    </select>
    
    <select id="selectPlatformUserRoleListByUserId" parameterType="int" resultMap="platformUserRoleResultMap">
        select id, user_id, role_id from platform_user_role where user_id = #{id}
    </select>
    
	<select id="selectPlatformUserByToken" resultMap="platformUserResultMap" parameterType="String">
		select id, password, email, name, tel, phone, qq, status, dep_id, token, create_time, update_time from platform_user where token = #{token}
	</select>
	
	<select id="selectPlatformUserByEmail" resultMap="platformUserResultMap" parameterType="String">
		select id, password, email, name, tel, phone, qq, status, dep_id, token, create_time, update_time from platform_user where email = #{email}
	</select>
	
	<select id="selectPlatformUserRoleCountByRoleId" resultType="int" parameterType="int">
		select count(1) from platform_user_role where role_id = #{roleId}
	</select>
	
	<select id="selectPlatformUserPageCount" resultType="int" parameterType="cn.creditloans.core.entity.platform.PlatformUser">
    	select count(1) from platform_user where 1=1
		<if test="depId != 0">  
			and dep_id = #{depId}  
		</if>
        <if test="name != null and '' != name">  
			and name like '%${name}%' 
		</if>
		<if test="email != null and '' != email">  
			and email like '%${email}%' 
		</if>
		<if test="status != -1">  
			and status = #{status}  
		</if>
    </select>
    
    <select id="selectPlatformUserPageList" resultMap="platformUserResultMap">
        select id, password, email, name, tel, phone, qq, status, dep_id, token, create_time, update_time from platform_user
        where 1=1
		<if test="user.depId != 0">  
			and dep_id = #{user.depId}  
		</if>
        <if test="user.name != null and '' != user.name">  
			and name like '%${user.name}%' 
		</if>
		<if test="user.email != null and '' != user.email">  
			and email like '%${user.email}%' 
		</if>
		<if test="user.status != -1">  
			and status = #{user.status}  
		</if>
		order by create_time desc limit #{pm.pageSize} offset #{pm.startCount}
    </select>
    
    <insert id="insertPlatformUser" parameterType="cn.creditloans.core.entity.platform.PlatformUser">
    	<selectKey order="AFTER" keyProperty="id" resultType="java.lang.Integer">
			SELECT currval('platform_user_id_seq')
		</selectKey>
		
		insert into platform_user (password, email, name, tel, phone, qq, status, dep_id, token, create_time, update_time )
					values (#{password}, #{email}, #{name}, #{tel}, #{phone}, #{qq}, #{status}, #{depId}, #{token}, now(), now())
    </insert>
    
	<insert id="batchInsertPlatformUserRole" parameterType="java.util.List">
        insert into platform_user_role (user_id, role_id, create_time, update_time)  
        VALUES  
        <foreach collection="list" item="item" index="index" separator=",">  
            (#{item.userId}, #{item.roleId}, now(), now())
        </foreach>  
    </insert>
    
    <update id="updatePlatformUser" parameterType="cn.creditloans.core.entity.platform.PlatformUser">
    	update platform_user set password=#{password}, email=#{email}, name=#{name}, tel=#{tel}, phone=#{phone}, qq=#{qq}, status=#{status}, 
    					dep_id=#{depId}, token=#{token}, update_time=now() where id=#{id}
    </update>
    
    <update id="updatePlatformUserPassword" >
    	update platform_user set password = #{password}, update_time = now() where id = #{id}
    </update>
    
    <update id="updatePlatformUserToken"  parameterType="cn.creditloans.core.entity.platform.PlatformUser">
    	update platform_user set token = #{token}, update_time = now() where id = #{id}
    </update>
    
    <update id="updatePlatformUserStatus"  parameterType="cn.creditloans.core.entity.platform.PlatformUser">
    	update platform_user set status = #{status}, update_time = now() where id = #{id}
    </update>
    
    <delete id="deletePlatformUserByUserId" parameterType="int">
    	delete from platform_user where id=#{userId}
    </delete>
    
    <delete id="deletePlatformUserRoleByUserId" parameterType="int">
    	delete from platform_user_role where user_id=#{userId}
    </delete>
    
</mapper>    